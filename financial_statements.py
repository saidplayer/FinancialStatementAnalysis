# -*- coding: utf-8 -*-
"""financial_statements.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OSCbbYEbQyoolJMmGOWzWUTeRwfEfNWF
"""

# www.drsoli.com
# This is the full source code for Financial statements analysis post
# link to the post: https://drsoli.com/index.php/2023/09/18/10-k-financial-statements-analyzing-companies-reports-with-sec-edgar-api/

import requests
import json
from yfinance import download
from contextlib import suppress

CIK_list = [
  ["aapl",320193 ],
  ["msft",789019],
  ["xom",34088],
  ["nvda",1045810],
  ["tsla",1318605],
  ["pfe",78003],
  ["baba",1577552],
  ["csco",858877],
  ["adbe",796343],
  ["pypl",1633917],
  ["ibm",51143],
  ["nflx",1065280],
  ["ba",12927],
  ["wmt", 104169],
  ["jpm", 19617],
  ["orcl", 1341439],
  ["nke", 320187],
  ["amd", 2488],
  ["tgt", 27419],
  ["ge", 40545],
  ["googl", 1652044],
  ["amzn", 1018724],
  ["f", 37996]
 ]

def get_price(Ticker):
    try:
        data = download(tickers=Ticker, period='1d', interval='1h', progress=False)
        data = str(data['Close'][0])
        return data
    except Exception as err:
        print("getPrice error: " + str(err))
        return None

def get_raw_data(CIK):
  CIK = str(CIK)
  for i in range(10 - len(CIK)):
    CIK = "0" + CIK
  my_headers = {"user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36" }
  data = requests.get("https://data.sec.gov/api/xbrl/companyfacts/CIK" + CIK + ".json", headers = my_headers)
  data = json.loads(data.text)
  return data

def calculate_ratios(data, ticker):
  current_ratio = "__"
  leverage_ratio = "__"
  PE_ratio = "__"
  inventory_turnover = "__"
  with suppress(KeyError):
    assets_current = (data["facts"]["us-gaap"]["AssetsCurrent"]["units"]["USD"][-1]["val"])
    liabilities_current = (data["facts"]["us-gaap"]["LiabilitiesCurrent"]["units"]["USD"][-1]["val"])
    current_ratio = assets_current / liabilities_current
  with suppress(KeyError):
    assets = (data["facts"]["us-gaap"]["Assets"]["units"]["USD"][-1]["val"])
    stockholders_equity = (data["facts"]["us-gaap"]["StockholdersEquity"]["units"]["USD"][-1]["val"])
    leverage_ratio = assets / stockholders_equity
  with suppress(KeyError):
    earnings_per_share_basic = (data["facts"]["us-gaap"]["EarningsPerShareBasic"]["units"]["USD/shares"][-1]["val"])
    share_price = get_price(ticker)
    PE_ratio = float(share_price) / earnings_per_share_basic
  try:
    inventory_net = (data["facts"]["us-gaap"]["InventoryNet"]["units"]["USD"][-1]["val"])
    try:
      cost_of_goods_sold = (data["facts"]["us-gaap"]["CostOfGoodsSold"]["units"]["USD"][-1]["val"])
    except:
      try:
        cost_of_goods_sold = (data["facts"]["us-gaap"]["CostOfGoodsAndServicesSold"]["units"]["USD"][-1]["val"])
      except:
        try:
          cost_of_goods_sold = (data["facts"]["us-gaap"]["CostOfRevenue"]["units"]["USD"][-1]["val"]) - (data["facts"]["us-gaap"]["MarketingAndAdvertisingExpense"]["units"]["USD"][-1]["val"])
        except:
          cost_of_goods_sold = (data["facts"]["us-gaap"]["CostOfRevenue"]["units"]["USD"][-1]["val"]) - (data["facts"]["us-gaap"]["AdvertisingExpense"]["units"]["USD"][-1]["val"])
    inventory_turnover = cost_of_goods_sold / inventory_net
  except:
    pass
  ratios = [current_ratio, leverage_ratio, PE_ratio, inventory_turnover]
  ratios = [ratio if isinstance(ratio, str) else str(round(ratio,3)) for ratio in ratios]
  return ratios

for [Ticker, CIK] in CIK_list:
  data = get_raw_data(CIK)
  print(Ticker, "\t\t", data["facts"]["us-gaap"]["Assets"]["units"]["USD"][-1]["val"])

print("%12s" % "Ticker", "%15s" % "Current", "%15s" %  "Leverage", "%15s" % "P/E", "%25s" % "Inventory Turnover")
print("     ___________________________________________________________________________________\n")
for [Ticker, CIK] in CIK_list:
  data = get_raw_data(CIK)
  ratios = calculate_ratios(data, Ticker)
  print("%12s" % Ticker, "%15s" % ratios[0], "%15s" % ratios[1], "%15s" % ratios[2], "%25s" % ratios[3])